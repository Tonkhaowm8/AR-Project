//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/inputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @characterInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @characterInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputAction"",
    ""maps"": [
        {
            ""name"": ""player"",
            ""id"": ""a2e61392-7579-4258-8802-159a56f94a81"",
            ""actions"": [
                {
                    ""name"": ""joystick"",
                    ""type"": ""Value"",
                    ""id"": ""a5b9adcc-8866-4b40-a830-edf3efe62ad4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""5732412e-8189-479e-a165-292dbe7d7ba9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""up"",
                    ""type"": ""Button"",
                    ""id"": ""d289936c-9527-40a1-aba5-acc3a22812e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""down"",
                    ""type"": ""Button"",
                    ""id"": ""42b5db94-d18f-439e-932d-8a7f3a2f50e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""restart"",
                    ""type"": ""Button"",
                    ""id"": ""f5f72d15-9f03-440c-88eb-5ec9c46d2866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""difficulty"",
                    ""type"": ""Button"",
                    ""id"": ""aaec0350-87c1-4adb-8e04-6425bbd405f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""planeType"",
                    ""type"": ""Button"",
                    ""id"": ""214a0ac6-fe72-4c28-b52b-adbeac8772ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""768106be-56b8-4c8c-8142-cb98a5479a3e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""349a1389-bec0-4f2d-869a-870031976a27"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d879ae63-cf71-435c-b9ee-1b9a5f2bffce"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""256779b9-5d68-4ecc-be2c-0810bd90298d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caecf353-e268-4574-9808-32b9b714d9f2"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""789f5df9-db74-49cc-ae74-cb5c22745ca7"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""difficulty"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36aa944f-6fe2-44ec-93f4-0314c5d45cdb"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""difficulty"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64e46e19-2b17-4247-a357-3b1285649bb5"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""difficulty"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40c3f541-77c0-4b0a-afeb-82f808e31211"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""planeType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67354e70-3d4b-4caa-ad90-f74a1f6dde5e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""planeType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21fe00e1-2796-470c-89b3-9957ae8da7b8"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""planeType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_joystick = m_player.FindAction("joystick", throwIfNotFound: true);
        m_player_shoot = m_player.FindAction("shoot", throwIfNotFound: true);
        m_player_up = m_player.FindAction("up", throwIfNotFound: true);
        m_player_down = m_player.FindAction("down", throwIfNotFound: true);
        m_player_restart = m_player.FindAction("restart", throwIfNotFound: true);
        m_player_difficulty = m_player.FindAction("difficulty", throwIfNotFound: true);
        m_player_planeType = m_player.FindAction("planeType", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player
    private readonly InputActionMap m_player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_player_joystick;
    private readonly InputAction m_player_shoot;
    private readonly InputAction m_player_up;
    private readonly InputAction m_player_down;
    private readonly InputAction m_player_restart;
    private readonly InputAction m_player_difficulty;
    private readonly InputAction m_player_planeType;
    public struct PlayerActions
    {
        private @characterInputAction m_Wrapper;
        public PlayerActions(@characterInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @joystick => m_Wrapper.m_player_joystick;
        public InputAction @shoot => m_Wrapper.m_player_shoot;
        public InputAction @up => m_Wrapper.m_player_up;
        public InputAction @down => m_Wrapper.m_player_down;
        public InputAction @restart => m_Wrapper.m_player_restart;
        public InputAction @difficulty => m_Wrapper.m_player_difficulty;
        public InputAction @planeType => m_Wrapper.m_player_planeType;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @joystick.started += instance.OnJoystick;
            @joystick.performed += instance.OnJoystick;
            @joystick.canceled += instance.OnJoystick;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @up.started += instance.OnUp;
            @up.performed += instance.OnUp;
            @up.canceled += instance.OnUp;
            @down.started += instance.OnDown;
            @down.performed += instance.OnDown;
            @down.canceled += instance.OnDown;
            @restart.started += instance.OnRestart;
            @restart.performed += instance.OnRestart;
            @restart.canceled += instance.OnRestart;
            @difficulty.started += instance.OnDifficulty;
            @difficulty.performed += instance.OnDifficulty;
            @difficulty.canceled += instance.OnDifficulty;
            @planeType.started += instance.OnPlaneType;
            @planeType.performed += instance.OnPlaneType;
            @planeType.canceled += instance.OnPlaneType;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @joystick.started -= instance.OnJoystick;
            @joystick.performed -= instance.OnJoystick;
            @joystick.canceled -= instance.OnJoystick;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @up.started -= instance.OnUp;
            @up.performed -= instance.OnUp;
            @up.canceled -= instance.OnUp;
            @down.started -= instance.OnDown;
            @down.performed -= instance.OnDown;
            @down.canceled -= instance.OnDown;
            @restart.started -= instance.OnRestart;
            @restart.performed -= instance.OnRestart;
            @restart.canceled -= instance.OnRestart;
            @difficulty.started -= instance.OnDifficulty;
            @difficulty.performed -= instance.OnDifficulty;
            @difficulty.canceled -= instance.OnDifficulty;
            @planeType.started -= instance.OnPlaneType;
            @planeType.performed -= instance.OnPlaneType;
            @planeType.canceled -= instance.OnPlaneType;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnDifficulty(InputAction.CallbackContext context);
        void OnPlaneType(InputAction.CallbackContext context);
    }
}
